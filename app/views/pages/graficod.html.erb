<!DOCTYPE html>
<html>
<head>

    <style>
        text {
            font: 12px sans-serif;
        }
        svg {
            display: block;
            height: 500px !important;
        }
        html, body, #chart1, svg {
            margin: 0px;
            padding: 0px;
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>

<div id="chart1">
    <svg></svg>
</div>

<script>
    var data=[

        {
            "key": "Ingresos por H",
            "values": [ [2002,0],[ 2003, 6075] , [ 2004 ,  6592] , [2005 , 4923] , [ 2006 , 7172] , [ 2007 , 9492] , [ 2008 , 13128] , [  2009 , 11038] , [ 2010 , 12195] , [ 2011 , 14219] , [ 2012 , 15306] , [ 2013 , 16061] , [2014, 20356] , [2015 , 15989]]
            
        },
        {
            "key": "Costos Variables por H",
            "values": [[2002,0], [ 2003, 3679] , [ 2004, 4457] , [ 2005 , 5758] , [ 2006 , 6225] , [ 2007 , 7371] , [  2008 , 7741] , [ 2009 ,8119] , [ 2010 ,7448] , [2011 ,9255] , [ 2012 ,10353] , [ 2013 ,10444] , [2014 ,8069] , [2015, 9946]]
            
        },
        {
            "key": "Costos Fijos por H",
            "values": [ [2002,0],[2003, 1070] , [ 2004 ,1223] , [ 2005 ,1347] , [ 2006 ,1292] , [2007 ,1159] , [  2008 ,2369] , [ 2009 ,2007] , [ 2010 ,2249] , [ 2011 ,2075] , [ 2012 , 2069] , [ 2013 ,2568] , [ 2014 , 2969] , [ 2015 ,3888]]
        },
        {
            "key": "Flujo Operacional por H",
            "values": [ [2002,0],[ 2003, 1326] , [2004 , 912] , [ 2005, -2182] , [ 2006 , -345] , [2007 ,962] , [  2008 , 3019] , [ 2009 ,912] , [ 2010 ,2499] , [ 2011 ,2888] , [ 2012 ,2885] , [ 2013 , 3049] , [ 2014, 9312] , [ 2015 , 3237]]
        }
    ];

    // Wrapping in nv.addGraph allows for '0 timeout render', stores rendered charts in nv.graphs,
    // and may do more in the future... it's NOT required
    nv.addGraph(function() {
        var chart = nv.models.cumulativeLineChart()
            .useInteractiveGuideline(true)
            .x(function(d) { return d[0] })
            .y(function(d) { return d[1]})
            .color(d3.scale.category10().range())
            .duration(300)
        chart.dispatch.on('renderEnd', function() {
            console.log('render complete: cumulative line with guide line');
        });
			chart.yAxis.tickFormat(d3.format('.2'));    
        d3.select('#chart1 svg')
            .datum(data)
            .call(chart);
        nv.utils.windowResize(chart.update);
        chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
        chart.state.dispatch.on('change', function(state){
            nv.log('state', JSON.stringify(state));
        });
        return chart;
    });

   /* function flatTestData() {
        return [{
            key: "Snakes",
            values: [0,1,2,3,4,5,6,7,8,9].map(function(d) {
                var currentDate = new Date();
                currentDate.setDate(currentDate.getDate() + d);
                return [currentDate, 0]
            })
        }];
    }*/
</script>
</body>

</html>